# -*- coding: utf-8 -*-
"""audios_to_images_v0514_2030.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9bOTcY3zmlKvBBoUXhtQyF8kUIPPRew

音声データの画像データへの変換

## References

- https://www.kaggle.com/kneroma/birdclef-mels-computer-public
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import sys
import numpy as np
import pandas as pd
import datetime
import librosa as lb
import librosa.display as lbd
import joblib
from tqdm.notebook import tqdm
import datetime

if "google.colab" in sys.modules:
    from google.colab import drive
    drive.mount('/content/drive')
#     %cd /content/drive/MyDrive/kaggle/kaggle-birdclef-2021/notebook/
    if not os.path.exists("/content/birdclef-2021"):
        !unzip ../download/birdclef-2021.zip -d /content/birdclef-2021/

import sys
sys.path.append("../lib")
import birdclef

class Config:
    def __init__(self, debug:bool):
        self.debug = debug
        self.suffix = "_debug" if self.debug else ""
        self.sampling_rate = 32000
        self.n_mels = 128
        self.fmin = 500
        self.fmax = 12500
        self.duration = 5
        # 666に意味はないらしい．
        # cf. https://www.kaggle.com/c/birdclef-2021/discussion/234154
        self.step = int(self.duration * 0.666 * self.sampling_rate) # なんで？
        self.res_type = "kaiser_fast"
        self.resample = True
        self.output_directory = f"/content/data{self.suffix}" if "google.colab" in sys.modules else f"./data{self.suffix}"
        self.audio_image_directory = os.path.join(
            self.output_directory,
            "audio_images"
        )
        self.now = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        self.output_filepath = f"audio_images_train_metadata_v{self.now}{self.suffix}.zip"

config = Config(debug=False)
os.makedirs(config.output_directory, exist_ok=True)
os.makedirs(config.audio_image_directory, exist_ok=True)

ex_train_df = birdclef.datasets.load_external_train_data()
train_df = birdclef.datasets.load_train_data()
test_df = birdclef.datasets.load_test_data()
if config.debug:
    ex_train_df = ex_train_df.head()
    train_df = train_df.head()

def get_audios_as_images(df:pd.DataFrame):
    pool = joblib.Parallel(2)
    converter = birdclef.preprocessing.AudioToImage(
        sr=config.sampling_rate,
        n_mels=config.n_mels,
        fmin=config.fmin,
        fmax=config.fmax,
        duration=config.duration,
        step=config.step,
        res_type=config.res_type,
        resample=config.resample,
        audio_image_directory=config.audio_image_directory
    )
    mapper = joblib.delayed(converter)
    tasks = [mapper(row) for idx, row in df.iterrows()]

    pool(tqdm(tasks))

get_audios_as_images(ex_train_df)

print(f"Save to {config.output_filepath}")
!zip -r {config.output_filepath} {config.audio_image_directory}
